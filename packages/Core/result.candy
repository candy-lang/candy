bool = use "..bool"
[ifElse] = use "..controlFlow"
[equals] = use "..equality"
function = use "..function"
struct = use "..struct"
tag = use "..tag"
type = use "..type"

is value := value %
  Ok _ | Error _ -> True
  _ -> False

getValue result :=
  needs (is result)
  result | tag.getValue

isOk result :=
  needs (is result)
  result | tag.withoutValue | equals Ok
unwrap result :=
  needs (is result)
  needs (isOk result)
  result | getValue
expect result message :=
  needs (is result)
  needs (type.is message Text)
  needs (isOk result) message
  result | getValue

isError result :=
  needs (is result)
  result | tag.withoutValue | equals Error
unwrapError result :=
  needs (is result)
  needs (isError result)
  result | getValue
expectError result message :=
  needs (is result)
  needs (type.is message Text)
  needs (isError result) message
  result | getValue

mapOrElse result okMapper errorMapper :=
  # Returns `okMapper result.value` if `isOk result` and
  # `errorMapper result.value` if `isError result`.
  needs (is result)
  needs (function.is1 okMapper)
  needs (function.is1 errorMapper)
  result %
    Ok value -> okMapper value
    Error value -> errorMapper value
mapOr result okMapper errorValue :=
  # Returns `okMapper result.value` if `isOk result` and `errorValue` if
  # `isError result`.
  needs (is result)
  needs (function.is1 okMapper)
  result | mapOrElse okMapper { value -> errorValue }

flatMap result okMapper :=
  # Returns `okMapper result.value` if `isOk result` and `result` if it
  # `isError`.
  #
  # `okMapper` can also return a result. This is useful for chaining together
  # multiple computations that may fail.
  needs (is result)
  needs (function.is1 okMapper)
  result | mapOr { value -> okMapper value } result
map result okMapper :=
  # Returns `Ok (okMapper result.value)` if it `isOk` and `result` if it
  # `isError`.
  needs (is result)
  needs (function.is1 okMapper)
  result | flatMap { value -> Ok (okMapper value) }
and resultA resultB :=
  # Returns `resultA` if it `isError` and `resultB` otherwise.
  needs (is resultA)
  needs (is resultB)
  resultA | flatMap { value -> resultB }

inspect result okSideEffect :=
  needs (is result)
  needs (function.is1 okSideEffect)
  result %
    Ok value -> okSideEffect value
    _ -> Nothing
  result
andAlso result okFunction :=
  # Returns `Ok result.value` if `result` `isOk` and `okFunction result.value`
  # also returns an `Ok` (whose value is discarded). Returns `result`'s or
  #`okFunction`'s error otherwise.
  needs (is result)
  needs (function.is1 okFunction)
  result | flatMap { value ->
    otherResult = okFunction value
    needs (is otherResult)
    otherResult | map { _ -> value }
  }

flatMapError result errorMapper :=
  # Returns `result` if it `isOk` and `errorMapper result.value` if it
  # `isError`.
  #
  # `errorMapper` can also return a result.
  needs (is result)
  needs (function.is1 errorMapper)
  result | mapOrElse { value -> result } { value -> errorMapper value }
mapError result errorMapper :=
  # Returns `result` if it `isOk` and `Error (errorMapper result.value)` if it
  # `isError`.
  needs (is result)
  needs (function.is1 errorMapper)
  result | flatMapError { value -> Error (errorMapper value) }
or resultA resultB :=
  # Returns `resultA` if it `isOk` and `resultB` otherwise.
  needs (is resultA)
  needs (is resultB)
  resultA | flatMapError { value -> resultB }

unwrapOrElse result defaultGetter :=
  needs (is result)
  needs (function.is0 defaultGetter)
  result | mapOrElse { value -> value } { value -> function.run defaultGetter }
unwrapOr result default :=
  needs (is result)
  unwrapOrElse result { default }

flatten resultOfResult :=
  needs (is resultOfResult)
  resultOfResult | flatMap { innerResult ->
    needs (is innerResult)
    innerResult
  }

#test =
#  [checkEquals] = use "..check"
#  int = use "..int"
#
#  checkEquals (is (Ok 4)) True
#  checkEquals (is (Error 4)) True
#  checkEquals (is 4) False
#
#  checkEquals (getValue (Ok 4)) 4
#  checkEquals (getValue (Error 4)) 4
#
#  checkEquals (isOk (Error 4)) False
#  checkEquals (isOk (Ok 4)) True
#
#  checkEquals (unwrap (Ok 4)) 4
#  checkEquals (expect (Ok 4) "blub") 4
#
#  checkEquals (isError (Error 4)) True
#  checkEquals (isError (Ok 4)) False
#
#  checkEquals (unwrapError (Error 4)) 4
#  checkEquals (expectError (Error 4) "blub") 4
#
#  checkEquals ((Ok 4) | mapOrElse { a -> int.add a 1 } { a -> int.add a 2 }) 5
#  checkEquals ((Error 4) | mapOrElse { a -> int.add a 1 } { a -> int.add a 2 }) 6
#
#  checkEquals ((Ok 4) | mapOr { a -> int.add a 1 } 2) 5
#  checkEquals ((Error 4) | mapOr { a -> int.add a 1 } 2) 2
#
#  checkEquals ((Ok 1) | flatMap { a -> Ok (int.add a 1) }) (Ok 2)
#  checkEquals ((Error 1) | flatMap { a -> Ok (int.add a 1) }) (Error 1)
#  checkEquals ((Ok 1) | flatMap { a -> Error 3 }) (Error 3)
#
#  checkEquals ((Ok 1) | map { a -> int.add a 1 }) (Ok 2)
#  checkEquals ((Error 1) | map { a -> int.add a 1 }) (Error 1)
#
#  checkEquals ((Ok 1) | and (Ok 2)) (Ok 2)
#  checkEquals ((Ok 1) | and (Error 2)) (Error 2)
#  checkEquals ((Error 1) | and (Ok 2)) (Error 1)
#  checkEquals ((Error 1) | and (Error 2)) (Error 1)
#
#  checkEquals ((Ok 1) | flatMapError { a -> Ok (int.add a 1) }) (Ok 1)
#  checkEquals ((Error 1) | flatMapError { a -> Ok (int.add a 1) }) (Ok 2)
#  checkEquals ((Error 1) | flatMapError { a -> Error (int.add a 1) }) (Error 2)
#
#  checkEquals ((Ok 1) | mapError { a -> int.add a 1 }) (Ok 1)
#  checkEquals ((Error 1) | mapError { a -> int.add a 1 }) (Error 2)
#
#  checkEquals ((Ok 1) | or (Ok 2)) (Ok 1)
#  checkEquals ((Ok 1) | or (Error 2)) (Ok 1)
#  checkEquals ((Error 1) | or (Ok 2)) (Ok 2)
#  checkEquals ((Error 1) | or (Error 2)) (Error 2)
#
#  checkEquals (unwrapOrElse (Ok 1) { 2 }) 1
#  checkEquals (unwrapOrElse (Error 1) { 2 }) 2
#
#  checkEquals (unwrapOr (Ok 1) 2) 1
#  checkEquals (unwrapOr (Error 1) 2) 2
#
#  checkEquals (flatten (Error 1)) (Error 1)
#  checkEquals (flatten (Ok (Error 1))) (Error 1)
#  checkEquals (flatten (Ok (Ok 1))) (Ok 1)
